{"mappings":"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","sources":["<anon>","node_modules/copy-to-clipboard/index.js","node_modules/toggle-selection/index.js"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar parcelRequire = $parcel$global[\"parcelRequire3085\"];\nparcelRequire.register(\"jIrAL\", function(module, exports) {\n\"use strict\";\n\nvar $dBgTd = parcelRequire(\"dBgTd\");\nvar $e5a78797c4262d1f$var$clipboardToIE11Formatting = {\n    \"text/plain\": \"Text\",\n    \"text/html\": \"Url\",\n    \"default\": \"Text\"\n};\nvar $e5a78797c4262d1f$var$defaultMessage = \"Copy to clipboard: #{key}, Enter\";\nfunction $e5a78797c4262d1f$var$format(message) {\n    var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n    return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\nfunction $e5a78797c4262d1f$var$copy(text, options) {\n    var debug, message, reselectPrevious, range, selection, mark, success = false;\n    if (!options) options = {};\n    debug = options.debug || false;\n    try {\n        reselectPrevious = $dBgTd();\n        range = document.createRange();\n        selection = document.getSelection();\n        mark = document.createElement(\"span\");\n        mark.textContent = text;\n        // avoid screen readers from reading out loud the text\n        mark.ariaHidden = \"true\";\n        // reset user styles for span element\n        mark.style.all = \"unset\";\n        // prevents scrolling to the end of the page\n        mark.style.position = \"fixed\";\n        mark.style.top = 0;\n        mark.style.clip = \"rect(0, 0, 0, 0)\";\n        // used to preserve spaces and line breaks\n        mark.style.whiteSpace = \"pre\";\n        // do not inherit user-select (it may be `none`)\n        mark.style.webkitUserSelect = \"text\";\n        mark.style.MozUserSelect = \"text\";\n        mark.style.msUserSelect = \"text\";\n        mark.style.userSelect = \"text\";\n        mark.addEventListener(\"copy\", function(e) {\n            e.stopPropagation();\n            if (options.format) {\n                e.preventDefault();\n                if (typeof e.clipboardData === \"undefined\") {\n                    debug && console.warn(\"unable to use e.clipboardData\");\n                    debug && console.warn(\"trying IE specific stuff\");\n                    window.clipboardData.clearData();\n                    var format = $e5a78797c4262d1f$var$clipboardToIE11Formatting[options.format] || $e5a78797c4262d1f$var$clipboardToIE11Formatting[\"default\"];\n                    window.clipboardData.setData(format, text);\n                } else {\n                    e.clipboardData.clearData();\n                    e.clipboardData.setData(options.format, text);\n                }\n            }\n            if (options.onCopy) {\n                e.preventDefault();\n                options.onCopy(e.clipboardData);\n            }\n        });\n        document.body.appendChild(mark);\n        range.selectNodeContents(mark);\n        selection.addRange(range);\n        var successful = document.execCommand(\"copy\");\n        if (!successful) throw new Error(\"copy command was unsuccessful\");\n        success = true;\n    } catch (err) {\n        debug && console.error(\"unable to copy using execCommand: \", err);\n        debug && console.warn(\"trying IE specific stuff\");\n        try {\n            window.clipboardData.setData(options.format || \"text\", text);\n            options.onCopy && options.onCopy(window.clipboardData);\n            success = true;\n        } catch (err) {\n            debug && console.error(\"unable to copy using clipboardData: \", err);\n            debug && console.error(\"falling back to prompt\");\n            message = $e5a78797c4262d1f$var$format(\"message\" in options ? options.message : $e5a78797c4262d1f$var$defaultMessage);\n            window.prompt(message, text);\n        }\n    } finally{\n        if (selection) {\n            if (typeof selection.removeRange == \"function\") selection.removeRange(range);\n            else selection.removeAllRanges();\n        }\n        if (mark) document.body.removeChild(mark);\n        reselectPrevious();\n    }\n    return success;\n}\nmodule.exports = $e5a78797c4262d1f$var$copy;\n\n});\nparcelRequire.register(\"dBgTd\", function(module, exports) {\nmodule.exports = function() {\n    var selection = document.getSelection();\n    if (!selection.rangeCount) return function() {};\n    var active = document.activeElement;\n    var ranges = [];\n    for(var i = 0; i < selection.rangeCount; i++)ranges.push(selection.getRangeAt(i));\n    switch(active.tagName.toUpperCase()){\n        case \"INPUT\":\n        case \"TEXTAREA\":\n            active.blur();\n            break;\n        default:\n            active = null;\n            break;\n    }\n    selection.removeAllRanges();\n    return function() {\n        selection.type === \"Caret\" && selection.removeAllRanges();\n        if (!selection.rangeCount) ranges.forEach(function(range) {\n            selection.addRange(range);\n        });\n        active && active.focus();\n    };\n};\n\n});\n\n\n\n//# sourceMappingURL=copy-to-clipboard.a70011ec.js.map\n","\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar clipboardToIE11Formatting = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // avoid screen readers from reading out loud the text\n    mark.ariaHidden = \"true\"\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        if (typeof e.clipboardData === \"undefined\") { // IE 11\n          debug && console.warn(\"unable to use e.clipboardData\");\n          debug && console.warn(\"trying IE specific stuff\");\n          window.clipboardData.clearData();\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"]\n          window.clipboardData.setData(format, text);\n        } else { // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n"],"names":["parcelRequire","$parcel$global","globalThis","self","window","global","register","module","exports","$dBgTd","$e5a78797c4262d1f$var$clipboardToIE11Formatting","text","options","message","copyKey","debug","reselectPrevious","range","selection","mark","success","document","createRange","getSelection","createElement","textContent","ariaHidden","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","format","preventDefault","clipboardData","console","warn","clearData","setData","onCopy","body","appendChild","selectNodeContents","addRange","execCommand","Error","err","error","test","navigator","userAgent","replace","prompt","removeRange","removeAllRanges","removeChild","rangeCount","active","activeElement","ranges","i","push","getRangeAt","tagName","toUpperCase","blur","type","forEach","focus"],"version":3,"file":"copy-to-clipboard.a70011ec.js.map"}